-------- CARACTERÍSTICAS PRINCIPAIS DA FUNÇÃO ---------
* Um dado (ou mais) entre em uma função e um novo dado sai dessa função
* Não altera dados
* Não guarda estado stateless


------------ PONTOS POSITIVOS -------------
* Fácil manutenção
* Fácil uso de testes
    - Funções isoladas e consistentes
* Código mais confiáveis


------------ PRINCÍPIOS -------------------
- Paradigmas
    * Programação Imperativa
    * Programação Declarativa

- Dados
    * Imutabilidade
    * Stateless

- Funções
    * Independentes
    * Puras
    * Higher-order
    * First-class
    * Composição


-------- PROGRAMAÇÃO IMPERTIVA vs PROGRAMAÇÃO DECLARATIVA -------
* Programação Imperativa
    - O código é pesnado e gerado em sequência
    - O código é pensado como um passo a passo, como uma receita de bolo
    - Uma coisa depende da outra
    - O estado de um dado é alterado constantemente causando mutações nas variáveis
    - Orientação a Objetos é um tipo de paradigma imperativo


* Programação Declarativa
    - O código é gerado para fazer algo, não importa como
    - O que fazer e não como fazer
    - Não há necessidade de uma passo a passo no código
    - Programação funcional é um tipo de paradigma declarativo


-------------------- IMUTABILIDADE ---------------------
* Uma variável não vai variar
* Se você precisar mudar uma variável, você não muda, você cria uma nova


-------------------- STATELESS ------------------------
* Não guarda estado
* A função só conhece dados entregues a ela
* A resposta não pode variar


---------------- FUNÇÕES INDEPENDENTES ----------------
* Deverá ter ao menos 1 argumento
* Deverá retornar algo
* Nada que acontecer lá dentro afeta o mundo externo
    - dados imutáveis
    - não guardar estado
* Não faremos uso de loops (for, while), mas se houver necessidade de tal, usaremos recursão (a função chama ela mesma)


------------------ FUNÇÕES PURAS --------------------
* Não deverá depender de nenhum dado externo a não ser o que foi passado como argumento
* Não deverá sofrer nenhum interferência do mundo externo a ela
* Se o argumento é o mesmo, o retorno não poderá ser diferente quando a função for chamada novamente
* Não terá nenhum efeito colateral no seu código
    - Não irá modificar nenhum dado
    - Não irá guardar nenhum estado


------------------- FIRST-CLASS FUNCTION -------------------
* Podem estar em qualquer lugar, inclusive, como parâmetro de outras Funções
* A função poderá ser entendida cmo uma variável


-------------------- HIGHER-ORDER FUNCTION -----------------
* Funções que recebem funções como argumentos
* Funções que poderão retornar outras funções


-------------------- COMPOSIÇÃO DE FUNÇÕES -------------------
* Um encadeamento de funções
* Uma função que retorna um dado e vai pra outra função, que retorna um dado e vaai pra outra funçao, que retorna....