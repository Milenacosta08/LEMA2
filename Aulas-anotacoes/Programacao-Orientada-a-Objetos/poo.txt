----------------- ORIENTAÇÃO A OBJETOS --------------------

* ONDE E QUANDO UTILIZAR
    - Linguagens
    - Quando quiser aplicação Padrões de Projetos
    - Quando quiser organizar seu código
    - Para melhor enetendimento do código, pesnando nele como OBJETOS
    - Quando precisar fazer reusode código
    - Para separar a complexidade de código, abstrair código e expor de maneira mais simples
    - Para classisficar as rotinas e trechos de código

* OBJETOS
    Todo objeto possui
        - Propriedade e Funcionalidades
        - Estado e Comportamentos
        - Atributos e Métodos

* CLASSES
    As classes na orientação a objetos funcionam como um molde para os objetos. Os objetos sãp criados a partir de uma classe e muito deles podem ser feitos das mesma classe
    - Exemplo: Máquina de biscoito
        * Instâncias

* CLASSES EM JAVASCRIPT
    - Syntactical sugar
    - Prototype (Os objetos são protótipos)
    - O objeto herda outras funcionalidades além das estruturadas

* ENCAPSULAMENTO
    - Colocar numa cápsula
    - Agrupamento de funções e variáveis
    - Esconder detalhes de implementação
    - Camada de segurança para os atributos e métodos

* PROGRAMAÇÃO ESTRUTURADA x ORIENTADA A OBJETOS
    - Programação Estruturada
        * Processa a entrada e manipulação dos dados, até a saída
        * Uso de sequências, estruturas de repetições e condições
        * Uso de uma rotina maior, ou sub-rotinas
        * Não existem restrições às variáveis
    - Programação Orientada a Objetos
        * Surge para trazer um cuidado ao uso estruturado
            -> Não elimina por completo o uso estruturado
        * Conceitos como Objetos e Classes
        * Cuidados com variáveis e rotinas (Encapsulamento)
        * Melhor reuso de código (Herança)

* HERANÇA
    - Pais e filhos
        * Filho herda tudo do pai
    - Objetos podem herdar, ou estender, características bases
    - Uma cópia de atributos e métodos de outra classe
    - Um objeto pode estender de outro objeto que pode estender de outro objeto
    - Fácil reutilização de código

* POLIFORMISMO
    - Quando um objeto estende de outro (herança) talvez haja a anecessidade de reescrever uma ou mais características (atributos e métodos) nesse novo objeto.
    - Recriaremos então um método (ou mais) da classe herdada
    - Poliformismo significa muitas formas

* ABSTRAÇÃO
    - Template ou Identidade de uma classe que será construída no futuro
        * Atributos e métodos podem ser criados na classe de Abstração (Superclasse) MAS
        * A implementação dos métodos e atributos, só poderá ser feita na classe que irá herdar essa Abstração